{"version":3,"file":"main.js","mappings":"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","sources":["webpack://gessit/./apps/gessit-api/src/app/app.controller.ts","webpack://gessit/./apps/gessit-api/src/app/app.module.ts","webpack://gessit/./apps/gessit-api/src/app/app.service.ts","webpack://gessit/./apps/gessit-api/src/app/auth/auth.controller.ts","webpack://gessit/./apps/gessit-api/src/app/auth/auth.module.ts","webpack://gessit/./apps/gessit-api/src/app/auth/auth.service.ts","webpack://gessit/./apps/gessit-api/src/app/auth/constant.ts","webpack://gessit/./apps/gessit-api/src/app/auth/jwt-auth.guard.ts","webpack://gessit/./apps/gessit-api/src/app/auth/jwt.strategy.ts","webpack://gessit/./apps/gessit-api/src/app/auth/local-auth.guard.ts","webpack://gessit/./apps/gessit-api/src/app/auth/local.strategy.ts","webpack://gessit/./apps/gessit-api/src/app/auth/roles.decorator.ts","webpack://gessit/./apps/gessit-api/src/app/auth/roles.guard.ts","webpack://gessit/./apps/gessit-api/src/app/communities/communities.controller.ts","webpack://gessit/./apps/gessit-api/src/app/communities/communities.module.ts","webpack://gessit/./apps/gessit-api/src/app/communities/communities.service.ts","webpack://gessit/./apps/gessit-api/src/app/communities/community.schema.ts","webpack://gessit/./apps/gessit-api/src/app/communities/create-community.dto.ts","webpack://gessit/./apps/gessit-api/src/app/communities/update-community.dto.ts","webpack://gessit/./apps/gessit-api/src/app/messages/create-message.dto.ts","webpack://gessit/./apps/gessit-api/src/app/messages/message.schema.ts","webpack://gessit/./apps/gessit-api/src/app/messages/messages.controller.ts","webpack://gessit/./apps/gessit-api/src/app/messages/messages.module.ts","webpack://gessit/./apps/gessit-api/src/app/messages/messages.service.ts","webpack://gessit/./apps/gessit-api/src/app/messages/update-message.dto.ts","webpack://gessit/./apps/gessit-api/src/app/neo4j/neo4j.constants.ts","webpack://gessit/./apps/gessit-api/src/app/neo4j/neo4j.module.ts","webpack://gessit/./apps/gessit-api/src/app/neo4j/neo4j.service.ts","webpack://gessit/./apps/gessit-api/src/app/neo4j/neo4j.util.ts","webpack://gessit/./apps/gessit-api/src/app/shared/filters/validation.exception.ts","webpack://gessit/./apps/gessit-api/src/app/shared/filters/validation.filter.ts","webpack://gessit/./apps/gessit-api/src/app/shared/pipes/object.id.pipe.ts","webpack://gessit/./apps/gessit-api/src/app/themes/create-theme.dto.ts","webpack://gessit/./apps/gessit-api/src/app/themes/theme.schema.ts","webpack://gessit/./apps/gessit-api/src/app/themes/themes.controller.ts","webpack://gessit/./apps/gessit-api/src/app/themes/themes.module.ts","webpack://gessit/./apps/gessit-api/src/app/themes/themes.service.ts","webpack://gessit/./apps/gessit-api/src/app/threads/create-thread.dto.ts","webpack://gessit/./apps/gessit-api/src/app/threads/thread.schema.ts","webpack://gessit/./apps/gessit-api/src/app/threads/threads.controller.ts","webpack://gessit/./apps/gessit-api/src/app/threads/threads.module.ts","webpack://gessit/./apps/gessit-api/src/app/threads/threads.service.ts","webpack://gessit/./apps/gessit-api/src/app/threads/update-thread.dto.ts","webpack://gessit/./apps/gessit-api/src/app/users/create-user.dto.ts","webpack://gessit/./apps/gessit-api/src/app/users/role.enum.ts","webpack://gessit/./apps/gessit-api/src/app/users/update-user.dto.ts","webpack://gessit/./apps/gessit-api/src/app/users/user.schema.ts","webpack://gessit/./apps/gessit-api/src/app/users/users.controller.ts","webpack://gessit/./apps/gessit-api/src/app/users/users.module.ts","webpack://gessit/./apps/gessit-api/src/app/users/users.service.ts","webpack://gessit/./apps/gessit-api/src/environments/environment.prod.ts","webpack://gessit/external commonjs \"@nestjs/common\"","webpack://gessit/external commonjs \"@nestjs/core\"","webpack://gessit/external commonjs \"@nestjs/jwt\"","webpack://gessit/external commonjs \"@nestjs/mongoose\"","webpack://gessit/external commonjs \"@nestjs/passport\"","webpack://gessit/external commonjs \"bcrypt\"","webpack://gessit/external commonjs \"class-validator\"","webpack://gessit/external commonjs \"mongoose\"","webpack://gessit/external commonjs \"neo4j-driver\"","webpack://gessit/external commonjs \"passport-jwt\"","webpack://gessit/external commonjs \"passport-local\"","webpack://gessit/external commonjs \"tslib\"","webpack://gessit/webpack/bootstrap","webpack://gessit/./apps/gessit-api/src/main.ts"],"sourcesContent":["import { Controller } from '@nestjs/common';\r\n\r\n@Controller()\r\nexport class AppController {}","import { SetMetadata } from '@nestjs/common';\r\nexport const IS_PUBLIC_KEY = 'isPublic';\r\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\r\n\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { AuthModule } from './auth/auth.module';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { CommunitiesModule } from './communities/communities.module';\r\nimport { ThreadsModule } from './threads/threads.module';\r\nimport { UsersModule } from './users/users.module';\r\nimport { APP_GUARD } from '@nestjs/core';\r\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\r\nimport { RolesGuard } from './auth/roles.guard';\r\nimport { ThemesModule } from './themes/themes.module';\r\nimport { MessagesModule } from './messages/messages.module';\r\nimport { Neo4jModule } from './neo4j/neo4j.module';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forRoot(environment.BASE_MONGO_URL), CommunitiesModule, ThreadsModule, AuthModule, UsersModule, ThemesModule, MessagesModule, Neo4jModule.forRoot({\r\n    scheme: 'bolt',\r\n    host: environment.BASE_NEO_HOST,\r\n    port: 7687,\r\n    username: environment.USERNAME_NEO,\r\n    password: environment.PASSWORD_NEO,\r\n  })],\r\n  controllers: [AppController],\r\n  providers: [\r\n    {\r\n      provide: APP_GUARD,\r\n      useClass: JwtAuthGuard\r\n    },\r\n    {\r\n      provide: APP_GUARD,\r\n      useClass: RolesGuard\r\n    },\r\n    AppService\r\n  ],\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getData(): { message: string } {\r\n    return { message: 'Welcome to gessit-api!' };\r\n  }\r\n}\r\n","import { Body, Controller, Get, Post, Request, UseGuards } from \"@nestjs/common\";\r\nimport { Public } from \"../app.module\";\r\nimport { AuthService } from \"./auth.service\";\r\nimport { LocalAuthGuard } from \"./local-auth.guard\";\r\nimport { CreateUserDto } from \"../users/create-user.dto\";\r\n\r\n@Controller('auth')\r\nexport class AuthController {\r\n    constructor (private readonly authService: AuthService) {}\r\n\r\n    @Public()\r\n    @UseGuards(LocalAuthGuard)\r\n    @Post('login')\r\n    async login(@Request() req) {\r\n        return this.authService.login(req.body);\r\n    }\r\n\r\n    @Public()\r\n    @Post('register')\r\n    async register(@Body() user: CreateUserDto) {\r\n        return this.authService.register(user);\r\n    }\r\n    \r\n    @Get('profile')\r\n    getProfile(@Request() req) {\r\n        return req.user;\r\n    }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { AuthService } from './auth.service';\r\nimport { LocalStrategy } from './local.strategy';\r\nimport { JwtStrategy } from './jwt.strategy';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { PassportModule } from '@nestjs/passport';\r\nimport { JwtModule } from '@nestjs/jwt';\r\nimport { jwtConstants } from './constant';\r\nimport { AuthController } from './auth.controller';\r\n\r\n@Module({\r\n  imports: [\r\n    UsersModule,\r\n    PassportModule,\r\n    JwtModule.register({\r\n      secret: jwtConstants.secret,\r\n      signOptions: { expiresIn: '2d' },\r\n    }),\r\n  ],\r\n  providers: [AuthService, LocalStrategy, JwtStrategy],\r\n  exports: [AuthService],\r\n  controllers: [AuthController]\r\n})\r\nexport class AuthModule {}","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { UsersService } from '../users/users.service';\r\nimport { JwtService } from '@nestjs/jwt';\r\nimport * as bcrypt from 'bcrypt';\r\nimport { CreateUserDto } from '../users/create-user.dto';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  constructor(\r\n    private usersService: UsersService,\r\n    private jwtService: JwtService\r\n  ) {}\r\n\r\n  async validateUser(username: string, pass: string): Promise<any> {\r\n    const user = await this.usersService.getUserByUsername(username);\r\n\r\n    if (user) {\r\n      const result = await bcrypt.compare(pass, user.password);\r\n\r\n      if (result) {\r\n        const { password, ...result } = user;\r\n        return result;\r\n      }\r\n    }\r\n\r\n    throw new HttpException('Incorrect password or emailaddress', HttpStatus.BAD_REQUEST);\r\n  }\r\n\r\n  async login(user: any) {\r\n    const payload = { id: user._id, username: user.username, roles: user.roles };\r\n    const loggedInUser = await this.usersService.getUserByUsername(user.username);\r\n\r\n    return {\r\n      _id: loggedInUser._id,\r\n      username: loggedInUser.username,\r\n      emailAddress: loggedInUser.emailAddress,\r\n      roles: loggedInUser.roles,\r\n      image: loggedInUser.image,\r\n      access_token: this.jwtService.sign(payload),\r\n    };\r\n  }\r\n\r\n  async register(user: CreateUserDto) {\r\n    const result = await this.usersService.createUser(user.username, user.birthDate, user.emailAddress, user.phoneNumber, user.password, user.image);\r\n    return await this.login(result);\r\n  }\r\n}","export const jwtConstants = {\r\n    secret: 'secretKey',\r\n};","import { ExecutionContext, Injectable } from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { AuthGuard } from '@nestjs/passport';\r\nimport { IS_PUBLIC_KEY } from '../app.module';\r\n\r\n@Injectable()\r\nexport class JwtAuthGuard extends AuthGuard('jwt') {\r\n  constructor(private reflector: Reflector) {\r\n    super();\r\n  }\r\n\r\n  canActivate(context: ExecutionContext) {\r\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n    if (isPublic) {\r\n      return true;\r\n    }\r\n    return super.canActivate(context);\r\n  }\r\n}\r\n","import { ExtractJwt, Strategy } from 'passport-jwt';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport { jwtConstants } from './constant';\r\nimport { UsersService } from '../users/users.service';\r\n\r\n@Injectable()\r\nexport class JwtStrategy extends PassportStrategy(Strategy) {\r\n  constructor(private usersService: UsersService) {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      ignoreExpiration: false,\r\n      secretOrKey: jwtConstants.secret,\r\n    });\r\n  }\r\n\r\n  async validate(payload: any) {\r\n    const user = await this.usersService.getUserByUsername(payload.username);\r\n\r\n    if (user) {\r\n      return { id: user._id, username: user.username, roles: user.roles };\r\n    } else {\r\n      throw new HttpException('Login has expired', HttpStatus.UNAUTHORIZED);\r\n    }\r\n  }\r\n}","import { Injectable } from '@nestjs/common';\r\nimport { AuthGuard } from '@nestjs/passport';\r\n\r\n@Injectable()\r\nexport class LocalAuthGuard extends AuthGuard('local') {}","import { Strategy } from 'passport-local';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable()\r\nexport class LocalStrategy extends PassportStrategy(Strategy) {\r\n  constructor(private authService: AuthService) {\r\n    super();\r\n  }\r\n\r\n  async validate(username: string, password: string): Promise<any> {\r\n    const user = await this.authService.validateUser(username, password);\r\n    if (!user) {\r\n      throw new UnauthorizedException();\r\n    }\r\n    return user;\r\n  }\r\n}","import { SetMetadata } from '@nestjs/common';\r\nimport { Role } from '../users/role.enum';\r\n\r\nexport const ROLES_KEY = 'roles';\r\nexport const Roles = (...roles: Role[]) => SetMetadata(ROLES_KEY, roles);","import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\r\nimport { Reflector } from '@nestjs/core';\r\nimport { Role } from '../users/role.enum';\r\nimport { ROLES_KEY } from './roles.decorator';\r\n\r\n@Injectable()\r\nexport class RolesGuard implements CanActivate {\r\n  constructor(private reflector: Reflector) {}\r\n\r\n  canActivate(context: ExecutionContext): boolean {\r\n    const requiredRoles = this.reflector.getAllAndOverride<Role[]>(ROLES_KEY, [\r\n      context.getHandler(),\r\n      context.getClass(),\r\n    ]);\r\n    if (!requiredRoles) {\r\n      return true;\r\n    }\r\n    const { user } = context.switchToHttp().getRequest();\r\n    return requiredRoles.some((role) => user.roles?.includes(role));\r\n  }\r\n}","import { Body, Controller, Delete, Get, Param, Patch, Post, Req } from '@nestjs/common';\r\nimport { CommunitiesService } from './communities.service';\r\nimport { CreateCommunityDto } from './create-community.dto';\r\nimport { Community } from './community.schema';\r\nimport { UpdateCommunityDto } from './update-community.dto';\r\nimport { ObjectIdPipe } from '../shared/pipes/object.id.pipe';\r\nimport { Public } from '../app.module';\r\n\r\n@Controller('community')\r\nexport class CommunitiesController {\r\n  constructor(private readonly communityService: CommunitiesService) {}\r\n\r\n  @Get('/joined')\r\n  async getAllJoinedCommunities(@Req() req): Promise<Community[]> {\r\n    return await this.communityService.getJoinedCommunities(req);\r\n  }\r\n\r\n  @Get('/created')\r\n  async getAllCreatedCommunities(@Req() req): Promise<Community[]> {\r\n    return await this.communityService.getCreatedCommunities(req);\r\n  }\r\n\r\n  @Public()\r\n  @Get()\r\n  async getCommunities(): Promise<Community[]> {\r\n    return await this.communityService.getCommunities();\r\n  }\r\n\r\n  @Public()\r\n  @Get(':id')\r\n  async getCommunityById(@Param('id', ObjectIdPipe) id: string): Promise<Community> {\r\n    return await this.communityService.getCommunityById(id);\r\n  }\r\n\r\n  @Post()\r\n  async createCommunity(@Req() req, @Body() createCommunityDto: CreateCommunityDto): Promise<Community> {\r\n    return await this.communityService.createCommunity(req, createCommunityDto);\r\n  }\r\n\r\n  @Post(':id/join')\r\n  async joinCommunity(@Req() req, @Param('id', ObjectIdPipe) id: string): Promise<Community> {\r\n    return await this.communityService.joinCommunity(req, id);\r\n  }\r\n\r\n  @Post(':id/leave')\r\n  async leaveCommunity(@Req() req, @Param('id', ObjectIdPipe) id: string): Promise<Community> {\r\n    return await this.communityService.leaveCommunity(req, id);\r\n  }\r\n\r\n  @Patch(':id')\r\n  async updateCommunity(@Req() req, @Param('id', ObjectIdPipe) id: string, @Body() updateCommunityDto: UpdateCommunityDto): Promise<Community> {\r\n    return await this.communityService.updateCommunity(req, id, updateCommunityDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  async deleteCommunity(@Req() req, @Param('id', ObjectIdPipe) id: string): Promise<Community> {\r\n    return await this.communityService.deleteCommunity(req, id);\r\n  }\r\n}\r\n","import { MongooseModule } from \"@nestjs/mongoose\";\r\nimport { forwardRef, Module } from \"@nestjs/common\";\r\nimport { Community, CommunitySchema } from \"./community.schema\";\r\nimport { CommunitiesController } from \"./communities.controller\";\r\nimport { CommunitiesService } from \"./communities.service\";\r\nimport { ThemesModule } from \"../themes/themes.module\";\r\nimport { UsersModule } from \"../users/users.module\";\r\n\r\n@Module({\r\n    imports: [MongooseModule.forFeature([{ name: Community.name, schema: CommunitySchema }]), ThemesModule, forwardRef(() => UsersModule)],\r\n    controllers: [CommunitiesController],\r\n    providers: [CommunitiesService],\r\n    exports: [MongooseModule, CommunitiesService]\r\n})\r\n\r\nexport class CommunitiesModule {}","import { forwardRef, HttpException, HttpStatus, Inject, Injectable } from \"@nestjs/common\";\r\nimport { Community, CommunityDocument } from \"./community.schema\";\r\nimport { Model, Types } from \"mongoose\";\r\nimport { ThemesService } from \"../themes/themes.service\";\r\nimport { UsersService } from \"../users/users.service\";\r\nimport { UpdateCommunityDto } from \"./update-community.dto\";\r\nimport { Theme } from \"../themes/theme.schema\";\r\nimport { CreateCommunityDto } from \"./create-community.dto\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { ObjectIdPipe } from \"../shared/pipes/object.id.pipe\";\r\nimport { Role } from \"../users/role.enum\";\r\n\r\n@Injectable()\r\nexport class CommunitiesService {\r\n    constructor(@InjectModel(Community.name) private communityModel: Model<CommunityDocument>, private readonly themesService : ThemesService, @Inject(forwardRef(() => UsersService)) private readonly usersService : UsersService) {}\r\n\r\n    async getCommunityById(id: string): Promise<Community> {\r\n        await this.existing(id);\r\n        return await this.communityModel.findOne({ _id: new Types.ObjectId(id) });\r\n    }\r\n\r\n    async getCommunities(): Promise<Community[]> {\r\n        return await this.communityModel.find({});\r\n    }\r\n\r\n    async getJoinedCommunities(req): Promise<Community[]> {\r\n        const joinedCommunities : Community[] = []\r\n\r\n        const user = await this.usersService.getUserById(req.user.id);\r\n\r\n        for await (const communityId of user.joinedCommunities) {\r\n            joinedCommunities.push(await this.getCommunityById(communityId.toString()));\r\n        }\r\n\r\n        return joinedCommunities;\r\n    }\r\n\r\n    async getCreatedCommunities(req): Promise<Community[]> {\r\n        const createdCommunities : Community[] = []\r\n\r\n        const user = await this.usersService.getUserById(req.user.id);\r\n\r\n        for await (const communityId of user.createdCommunities) {\r\n            createdCommunities.push(await this.getCommunityById(communityId.toString()));\r\n        }\r\n\r\n        return createdCommunities;\r\n    }\r\n\r\n    async createCommunity(req, createCommunityDto: CreateCommunityDto): Promise<Community> {\r\n        if (createCommunityDto.themes) {\r\n            if (!(await this.areValidObjectIds(createCommunityDto.themes as string[]))) {\r\n                throw new HttpException('Themes attribute data must be of type ObjectId!', HttpStatus.BAD_REQUEST)\r\n            }\r\n        }\r\n\r\n        const themesArray = (await this.themesService.getThemes()).filter(p => createCommunityDto.themes.includes(p._id.toString()));\r\n\r\n        const mergedCommunity = new this.communityModel({\r\n            ...createCommunityDto,\r\n            _id: new Types.ObjectId(),\r\n            creationDate: new Date(),\r\n            ranking: 0,\r\n            themes: themesArray,\r\n            owner: await this.usersService.getUserById(req.user.id)\r\n        });\r\n\r\n        await this.usersService.addCreatedCommunity(mergedCommunity._id, new Types.ObjectId(req.user.id));\r\n        const community = await this.communityModel.create(mergedCommunity);\r\n\r\n        await this.communityModel.updateMany({ _id: mergedCommunity._id, \"owner._id\": new Types.ObjectId(req.user.id) }, { $push:  {\"owner.$[_id]createdCommunities\": mergedCommunity._id } } );\r\n\r\n        return community;\r\n    }\r\n\r\n    async joinCommunity(req, id: string): Promise<Community> {\r\n        await this.existing(id);\r\n\r\n        if ((await this.getCommunityById(id)).owner._id.equals(req.user.id)) {\r\n            throw new HttpException('Can not join your own created community!', HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        if ((await this.getCommunityById(id)).members.filter(p => p._id.equals(req.user.id)).length > 0) {\r\n            throw new HttpException('Already part of this community!', HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        await this.usersService.addJoinedCommunity(new Types.ObjectId(id), new Types.ObjectId(req.user.id));\r\n        const community = await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(id)}, {$push: {members: (await this.usersService.getUserById(req.user.id))._id}});\r\n\r\n        await this.communityModel.updateMany({ _id: new Types.ObjectId(id), \"owner._id\": new Types.ObjectId(req.user.id) }, { $push:  {\"owner.$[_id]joinedCommunities\": new Types.ObjectId(id) } } );\r\n\r\n        return community;\r\n    }\r\n\r\n    async leaveCommunity(req, id: string): Promise<Community> {\r\n        await this.existing(id);\r\n\r\n        if ((await this.getCommunityById(id)).owner._id.equals(req.user.id)) {\r\n            throw new HttpException('Can not leave your own created community!', HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        if ((await this.getCommunityById(id)).members.filter(p => p._id.equals(req.user.id)).length === 0) {\r\n            throw new HttpException('Not part of this community!', HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        await this.usersService.removeJoinedCommunity(new Types.ObjectId(id), new Types.ObjectId(req.user.id));\r\n        const community = await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(id)}, {$pull: {members: (await this.usersService.getUserById(req.user.id))._id}});\r\n\r\n        await this.communityModel.updateMany({ _id: new Types.ObjectId(id), \"owner._id\": new Types.ObjectId(req.user.id) }, { $pull:  {\"owner.$[_id]joinedCommunities\": new Types.ObjectId(id) } } );\r\n        return community;\r\n    }\r\n\r\n    async updateCommunity(req, id: string, updateCommunityDto: UpdateCommunityDto): Promise<Community> {\r\n        if (updateCommunityDto.themes) {\r\n            if (!(await this.areValidObjectIds(updateCommunityDto.themes as string[]))) {\r\n                throw new HttpException('Themes attribute data must be of type ObjectId!', HttpStatus.BAD_REQUEST)\r\n            }\r\n        }\r\n\r\n        await this.existing(id);\r\n\r\n        if ((await this.getCommunityById(id)).owner._id.equals(req.user.id) || req.user.roles.includes(Role.Admin)) {\r\n            let updatedObject = {};\r\n\r\n            if (updateCommunityDto.themes) {\r\n                const themes : Theme[] = [];\r\n    \r\n                for (const theme of updateCommunityDto.themes) {\r\n                    themes.push(await this.themesService.getThemeById(theme));\r\n                }\r\n    \r\n                delete updateCommunityDto.themes;\r\n    \r\n                updatedObject = { themes };\r\n            }\r\n    \r\n            updatedObject = { ...updateCommunityDto, ...updatedObject };\r\n    \r\n            return await this.communityModel.findOneAndUpdate({ _id: new Types.ObjectId(id) }, updatedObject);\r\n        } else {\r\n            throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\r\n        }\r\n    }\r\n\r\n    async deleteCommunity(req, id: string): Promise<Community> {\r\n        await this.existing(id);\r\n\r\n        const community = await this.communityModel.findOne({_id: new Types.ObjectId(id)});\r\n        const creator = await this.usersService.getUserById(community.owner._id.toString());\r\n\r\n        if ((await this.getCommunityById(id)).owner._id.equals(req.user.id) || req.user.roles.includes(Role.Admin)) {\r\n            for await (const memberId of community.members) {\r\n                await this.usersService.removeJoinedCommunity(new Types.ObjectId(community._id), new Types.ObjectId(memberId));\r\n            };\r\n\r\n            await this.usersService.removeCreatedCommunity(new Types.ObjectId(id), new Types.ObjectId(creator._id));\r\n            return await this.communityModel.findOneAndDelete({ _id: new Types.ObjectId(id) });\r\n        } else {\r\n            throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\r\n        }\r\n    }\r\n\r\n    async areValidObjectIds(value: string[]) {\r\n        return value.every((id) => ObjectIdPipe.isValidObjectId(id));\r\n    }\r\n\r\n    async existing(communityId: string): Promise<void> {\r\n        const community = await this.communityModel.findOne({ _id: new Types.ObjectId(communityId) });\r\n\r\n        if (!community) {\r\n            throw new HttpException(`Community with id ${communityId} does not exist!`, HttpStatus.BAD_REQUEST)\r\n        }\r\n    }\r\n}\r\n","import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\r\nimport { Document, Types } from \"mongoose\";\r\nimport { Theme } from \"../themes/theme.schema\";\r\nimport { Thread } from \"../threads/thread.schema\";\r\nimport { User } from \"../users/user.schema\";\r\n\r\nexport type CommunityDocument = Community & Document;\r\n\r\n@Schema()\r\nexport class Community {\r\n    @Prop()\r\n    _id: Types.ObjectId;\r\n\r\n    @Prop()\r\n    name: string;\r\n\r\n    @Prop()\r\n    description: string;\r\n\r\n    @Prop()\r\n    ranking: Number;\r\n\r\n    @Prop()\r\n    creationDate: Date;\r\n\r\n    @Prop()\r\n    image: string;\r\n\r\n    @Prop()\r\n    isOpen: boolean;\r\n\r\n    @Prop({\r\n        default: []\r\n    })\r\n    themes: Theme[]\r\n\r\n    @Prop({\r\n        default: []\r\n    })\r\n    threads: [Thread]\r\n\r\n    @Prop({\r\n        default: [],\r\n        ref: 'User'\r\n    })\r\n    members: [Types.ObjectId]\r\n\r\n    @Prop()\r\n    owner: User\r\n}\r\n\r\nexport const CommunitySchema = SchemaFactory.createForClass(Community);","import {\r\n    IsString,\r\n    IsNotEmpty,\r\n    IsDefined,\r\n    IsBoolean\r\n} from 'class-validator';\r\n\r\nexport class CreateCommunityDto {\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    name: string;\r\n\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    description: string;\r\n\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    image: string;\r\n\r\n    @IsBoolean()\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    isOpen: boolean;\r\n\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    themes: string[]\r\n}","import {\r\n    IsString,\r\n    IsBoolean,\r\n    IsOptional\r\n} from 'class-validator';\r\nimport { Thread } from '../threads/thread.schema';\r\n\r\nexport class UpdateCommunityDto {\r\n    @IsString()\r\n    @IsOptional()\r\n    name: string;\r\n\r\n    @IsString()\r\n    @IsOptional()\r\n    description: string;\r\n\r\n    @IsString()\r\n    @IsOptional()\r\n    image: string;\r\n\r\n    @IsBoolean()\r\n    @IsOptional()\r\n    isOpen: boolean;\r\n\r\n    @IsOptional()\r\n    themes: string[];\r\n\r\n    @IsOptional()\r\n    threads: Thread[];\r\n}","import {\r\n    IsString\r\n} from 'class-validator';\r\n\r\nexport class CreateMessageDto {\r\n    @IsString()\r\n    content: string;\r\n}","import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\r\nimport { Document, Types } from \"mongoose\";\r\n\r\nexport type MessageDocument = Message & Document;\r\n\r\n@Schema()\r\nexport class Message {\r\n    @Prop()\r\n    _id: Types.ObjectId;\r\n\r\n    @Prop({\r\n        ref: 'User'\r\n    })\r\n    creator: Types.ObjectId;\r\n\r\n    @Prop()\r\n    content: string;\r\n    \r\n    @Prop({\r\n        ref: 'User'\r\n    })\r\n    likes: [Types.ObjectId];\r\n\r\n    @Prop()\r\n    creationDate: Date;\r\n\r\n    @Prop()\r\n    hasLikes: boolean;\r\n}\r\n\r\nexport const MessageSchema = SchemaFactory.createForClass(Message);","import { Body, Controller, Delete, Get, Param, Patch, Post, Req } from \"@nestjs/common\";\r\nimport { Public } from \"../app.module\";\r\nimport { ObjectIdPipe } from \"../shared/pipes/object.id.pipe\";\r\nimport { CreateMessageDto } from \"./create-message.dto\";\r\nimport { Message } from \"./message.schema\";\r\nimport { MessagesService } from \"./messages.service\";\r\nimport { UpdateMessageDto } from \"./update-message.dto\";\r\n\r\n@Controller('community')\r\nexport class MessagesController {\r\n    constructor(private readonly messagesService: MessagesService) {}\r\n\r\n    @Public()\r\n    @Get(':communityId/thread/:threadId/message')\r\n    async getMessages(\r\n        @Param('communityId', ObjectIdPipe) communityId: string,\r\n        @Param('threadId', ObjectIdPipe) threadId: string): Promise<Message[]> {\r\n        return await this.messagesService.getMessages(communityId, threadId);\r\n    }\r\n\r\n    @Public()\r\n    @Get(':communityId/thread/:threadId/message/:messageId')\r\n    async getMessageById(\r\n        @Param('communityId', ObjectIdPipe) communityId: string, \r\n        @Param('threadId', ObjectIdPipe) threadId: string, \r\n        @Param('messageId', ObjectIdPipe) messageId: string): Promise<Message> {\r\n        return await this.messagesService.getMessageById(communityId, threadId, messageId);\r\n    }\r\n\r\n    @Post(':communityId/thread/:threadId/message')\r\n    async createMessage(\r\n        @Req() req, \r\n        @Param('communityId', ObjectIdPipe) communityId: string, \r\n        @Param('threadId', ObjectIdPipe) threadId: string, \r\n        @Body() createMessageDto: CreateMessageDto): Promise<Message> {\r\n        return await this.messagesService.createMessage(req, communityId, threadId, createMessageDto);\r\n    }\r\n\r\n    @Post(':communityId/thread/:threadId/message/:messageId/like')\r\n    async likeMessage(\r\n        @Req() req,\r\n        @Param('communityId', ObjectIdPipe) communityId: string, \r\n        @Param('threadId', ObjectIdPipe) threadId: string, \r\n        @Param('messageId', ObjectIdPipe) messageId: string): Promise<Message> {\r\n        return await this.messagesService.likeMessage(req, communityId, threadId, messageId);\r\n    }\r\n\r\n    @Patch(':communityId/thread/:threadId/message/:messageId')\r\n    async updateMessage(\r\n        @Req() req,\r\n        @Param('communityId', ObjectIdPipe) communityId: string, \r\n        @Param('threadId', ObjectIdPipe) threadId: string, \r\n        @Param('messageId', ObjectIdPipe) messageId: string,\r\n        @Body() updateMessageDto: UpdateMessageDto): Promise<Message> {\r\n        return await this.messagesService.updateMessage(req, communityId, threadId, messageId, updateMessageDto);\r\n    }\r\n\r\n    @Delete(':communityId/thread/:threadId/message/:messageId')\r\n    async deleteMessage(\r\n        @Req() req, \r\n        @Param('communityId', ObjectIdPipe) communityId: string, \r\n        @Param('threadId', ObjectIdPipe) threadId: string, \r\n        @Param('messageId', ObjectIdPipe) messageId: string) {\r\n        return await this.messagesService.deleteMessage(req, communityId, threadId, messageId);\r\n    }\r\n}","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from \"@nestjs/mongoose\";\r\nimport { CommunitiesModule } from '../communities/communities.module';\r\nimport { Message, MessageSchema } from './message.schema';\r\nimport { MessagesController } from './messages.controller';\r\nimport { MessagesService } from './messages.service';\r\n\r\n@Module({\r\n    imports: [MongooseModule.forFeature([{ name: Message.name, schema: MessageSchema }]), CommunitiesModule],\r\n    controllers: [MessagesController],\r\n    providers: [MessagesService]\r\n})\r\n\r\nexport class MessagesModule {}\r\n","import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { Model, Types } from \"mongoose\";\r\nimport { Community, CommunityDocument } from \"../communities/community.schema\";\r\nimport { Role } from \"../users/role.enum\";\r\nimport { CreateMessageDto } from \"./create-message.dto\";\r\nimport { Message, MessageDocument } from \"./message.schema\";\r\n\r\n@Injectable()\r\nexport class MessagesService {\r\n    constructor(@InjectModel(Community.name) private communityModel: Model<CommunityDocument>, @InjectModel(Message.name) private messageModel: Model<MessageDocument>) {}\r\n\r\n    async getMessageById(communityId: string, threadId: string, messageId: string): Promise<Message> {\r\n        await this.existing(communityId, threadId, messageId);\r\n\r\n        const community = await this.communityModel.findOne({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId), \"messages._id\": new Types.ObjectId(messageId)});\r\n        return community.threads.filter(p => p._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(p => p._id.equals(new Types.ObjectId(messageId)))[0];\r\n    }\r\n\r\n    async getMessages(communityId: string, threadId: string): Promise<Message[]> {\r\n        await this.existing(communityId, threadId);\r\n\r\n        const community = await this.communityModel.findOne({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)});\r\n        return community.threads.filter(p => p._id.equals(new Types.ObjectId(threadId)))[0].messages;\r\n    }\r\n\r\n    async createMessage(req, communityId: string, threadId: string, createMessageDto: CreateMessageDto): Promise<Message> {\r\n        await this.existing(communityId, threadId);\r\n\r\n        const currentCommunity = await this.communityModel.findOne({_id: new Types.ObjectId(communityId)});\r\n\r\n        if (currentCommunity.members.filter(p => p._id.equals(req.user.id)).length === 0) {\r\n            if (currentCommunity.owner._id.equals(req.user.id) || req.user.roles.includes(Role.Admin)) {\r\n                const id = new Types.ObjectId();\r\n                const newMessage = new this.messageModel({\r\n                    _id: id,\r\n                    creator: req.user.id,\r\n                    ...createMessageDto,\r\n                    likes: [],\r\n                    creationDate: new Date(),\r\n                    hasLikes: false\r\n                });\r\n        \r\n                const community = await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$push: {\"threads.$.messages\": newMessage}}, {new: true});\r\n                return community.threads.filter(p => p._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(p => p._id.equals(id))[0];\r\n            } else {\r\n                throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\r\n            }\r\n        } else {\r\n            const id = new Types.ObjectId();\r\n            const newMessage = new this.messageModel({\r\n                _id: id,\r\n                creator: req.user.id,\r\n                ...createMessageDto,\r\n                likes: [],\r\n                creationDate: new Date(),\r\n                hasLikes: false\r\n            });\r\n\r\n            const community = await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$push: {\"threads.$.messages\": newMessage}}, {new: true});\r\n            return community.threads.filter(p => p._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(p => p._id.equals(id))[0];\r\n        }\r\n    }\r\n\r\n    async likeMessage(req, communityId: string, threadId: string, messageId: string): Promise<Message> {\r\n        await this.existing(communityId, threadId, messageId);\r\n\r\n        const message = await this.getMessageById(communityId, threadId, messageId);\r\n\r\n        let result;\r\n\r\n        if (message.likes.filter(p => p.equals(req.user.id)).length === 0) {\r\n            result = (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$push: {\"threads.$.messages.$[message].likes\": req.user.id}}, {arrayFilters: [{ \"message._id\": new Types.ObjectId(messageId) }], new: true}));\r\n        } else {\r\n            result = (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$pull: {\"threads.$.messages.$[message].likes\": req.user.id}}, {arrayFilters: [{ \"message._id\": new Types.ObjectId(messageId) }], new: true}));\r\n        }\r\n\r\n        if ((result.threads.filter(p => p._id.equals(new Types.ObjectId(threadId))))[0].messages.filter(p => p._id.equals(new Types.ObjectId(messageId)))[0].likes.length > 0) {\r\n            result = (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$set: {\"threads.$.messages.$[message].hasLikes\": true}}, {arrayFilters: [{ \"message._id\": new Types.ObjectId(messageId) }], new: true}));\r\n        } else {\r\n            result = (await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$set: {\"threads.$.messages.$[message].hasLikes\": false}}, {arrayFilters: [{ \"message._id\": new Types.ObjectId(messageId) }], new: true}));\r\n        }\r\n\r\n        return result.threads.filter(p => p._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(p => p._id.equals(new Types.ObjectId(messageId)))[0];\r\n    }\r\n\r\n    async updateMessage(req, communityId: string, threadId: string, messageId: string, message: Partial<Message>): Promise<Message> {\r\n        await this.existing(communityId, threadId, messageId);\r\n\r\n        const community = await this.communityModel.findOne({_id: new Types.ObjectId(communityId)});\r\n        const resultMessage = community.threads.filter(p => p._id.equals(threadId))[0].messages.filter(p => p._id.equals(messageId))[0];\r\n\r\n        if (resultMessage.creator._id.equals(req.user.id) || req.user.roles.includes(Role.Admin)) {\r\n            const oldMessage = await this.getMessageById(communityId, threadId, messageId);\r\n            const newMessage = { ...oldMessage, ...message };\r\n    \r\n            await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$pull: {\"threads.$.messages\": oldMessage}});\r\n            return await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$push: {\"threads.$.messages\": newMessage}}, {new: true});\r\n        } else {\r\n            throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\r\n        }\r\n    }\r\n\r\n    async deleteMessage(req, communityId: string, threadId: string, messageId: string): Promise<Message> {\r\n        await this.existing(communityId, threadId, messageId);\r\n\r\n        const community = await this.communityModel.findOne({_id: new Types.ObjectId(communityId)});\r\n        const resultMessage = community.threads.filter(p => p._id.equals(threadId))[0].messages.filter(p => p._id.equals(messageId))[0];\r\n\r\n        if (resultMessage.creator._id.equals(req.user.id) || req.user.roles.includes(Role.Admin)) {\r\n            const message = await this.getMessageById(communityId, threadId, messageId);\r\n            return await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$pull: {\"threads.$.messages\": message }}, {new: true});\r\n        } else {\r\n            throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\r\n        }\r\n    }\r\n\r\n    async existing(communityId: string, threadId?: string, messageId?: string): Promise<void> {\r\n        const community = await this.communityModel.findOne({ _id: new Types.ObjectId(communityId) });\r\n\r\n        if (!community) {\r\n            throw new HttpException(`Community with id ${communityId} does not exist!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        if(threadId) {\r\n            if(!(community.threads.filter(p => p._id.equals(new Types.ObjectId(threadId))).length > 0)) {\r\n                throw new HttpException(`Thread with id ${threadId} doesn't exist in the community with id ${communityId}!`, HttpStatus.BAD_REQUEST);\r\n            }\r\n        }\r\n\r\n        if (messageId) {\r\n            if (!(community.threads.filter(p => p._id.equals(new Types.ObjectId(threadId)))[0].messages.filter(p => p._id.equals(new Types.ObjectId(messageId))).length > 0)) {\r\n                throw new HttpException(`Message with id ${messageId} doesn't exist in the thread with id ${threadId} in the community with id ${communityId}!`, HttpStatus.BAD_REQUEST);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n    IsOptional,\r\n    IsString\r\n} from 'class-validator';\r\n\r\nexport class UpdateMessageDto {\r\n    @IsString()\r\n    @IsOptional()\r\n    content: string;\r\n}","export const NEO4J_CONFIG: string = 'NEO4J_CONFIG';\r\nexport const NEO4J_DRIVER: string = 'NEO4J_DRIVER';","import { DynamicModule, Module } from '@nestjs/common';\nimport { Neo4jService } from './neo4j.service';\nimport { Neo4jConfig } from './neo4j-config.interface';\nimport { NEO4J_CONFIG, NEO4J_DRIVER } from './neo4j.constants';\nimport { createDriver } from './neo4j.util';\n\n\n@Module({})\nexport class Neo4jModule {\n  static forRoot(config: Neo4jConfig): DynamicModule {\n    return {\n      module: Neo4jModule,\n      providers: [\n        {\n          provide: NEO4J_CONFIG,\n          useValue: config\n        },\n        {\n          provide: NEO4J_DRIVER,\n          inject: [ NEO4J_CONFIG ],\n          useFactory: async (config: Neo4jConfig) => createDriver(config)\n        },\n        Neo4jService\n      ],\n      exports: [\n        Neo4jService\n      ]\n    }\n  }\n}\n","import { Inject, Injectable } from '@nestjs/common';\nimport { Neo4jConfig } from './neo4j-config.interface';\nimport { NEO4J_CONFIG, NEO4J_DRIVER } from './neo4j.constants';\nimport neo4j, { Driver, Result } from 'neo4j-driver';\n\n@Injectable()\nexport class Neo4jService {\n\n  constructor(\n    @Inject(NEO4J_CONFIG) private readonly config: Neo4jConfig,\n    @Inject(NEO4J_DRIVER) private readonly driver: Driver\n  ) {}\n\n  getDriver(): Driver {\n    return this.driver;\n  }\n\n  getConfig(): Neo4jConfig {\n    return this.config;\n  }\n\n  getReadSession(database?: string) {\n    return this.driver.session({\n      database: database || this.config.database,\n      defaultAccessMode: neo4j.session.READ\n    });\n  }\n\n  getWriteSession(database?: string) {\n    return this.driver.session({\n      database: database || this.config.database,\n      defaultAccessMode: neo4j.session.WRITE\n    })\n  }\n\n  read(cypher: string, params: Record<string, any>, database?: string): Result {\n    const session = this.getReadSession(database);\n    return session.run(cypher, params);\n  }\n\n  write(cypher: string, params: Record<string, any>, database?: string): Result {\n    const session = this.getWriteSession(database);\n    return session.run(cypher, params);\n  }\n}\n","import neo4j, { Driver } from \"neo4j-driver\";\r\nimport { Neo4jConfig } from \"./neo4j-config.interface\";\r\n\r\nexport const createDriver = async (config: Neo4jConfig) => {\r\n    console.log(`${config.scheme}://${config.host}:${config.port}`)\r\n    const driver: Driver = neo4j.driver(\r\n        `${config.scheme}://${config.host}:${config.port}`,\r\n        neo4j.auth.basic(config.username, config.password)\r\n    );\r\n\r\n    await driver.verifyConnectivity();\r\n\r\n    return driver;\r\n}","import { BadRequestException } from \"@nestjs/common\";\r\n\r\nexport class ValidationException extends BadRequestException {\r\n    constructor(public validationErrors: string[]) {\r\n        super();\r\n    }\r\n}","import { ArgumentsHost, Catch, ExceptionFilter } from \"@nestjs/common\";\r\nimport { ValidationException } from \"./validation.exception\";\r\n\r\n@Catch(ValidationException)\r\nexport class ValidationFilter implements ExceptionFilter {\r\n    catch (exception: ValidationException, host: ArgumentsHost): any {\r\n        const ctx = host.switchToHttp(),\r\n        response = ctx.getResponse();\r\n\r\n        return response.status(400).json({\r\n            statusCode: 400,\r\n            timeStamp: new Date(),\r\n            createdBy: \"ValidationFilter\",\r\n            validationErrors: exception.validationErrors\r\n        });\r\n    }\r\n}","import { PipeTransform } from \"@nestjs/common\";\r\nimport { ValidationException } from \"../filters/validation.exception\";\r\nvar ObjectId = require('mongoose').Types.ObjectId;\r\n\r\nexport class ObjectIdPipe implements PipeTransform<string> {\r\n    transform(value: string): string {\r\n        if (!ObjectId.isValid(value)) {\r\n            throw new ValidationException([`ObjectId has wrong value: ${value}, ObjectId is not valid!`]);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    public static isValidObjectId(value: any): boolean {\r\n        try {\r\n            ObjectId.createFromHexString(value);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n}","import {\r\n    IsDefined,\r\n    IsNotEmpty,\r\n    IsString\r\n} from 'class-validator';\r\n\r\nexport class CreateThemeDto {\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    name: string;\r\n}","import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\r\nimport { Document, Types } from \"mongoose\";\r\n\r\nexport type ThemeDocument = Theme & Document;\r\n\r\n@Schema()\r\nexport class Theme {\r\n    @Prop()\r\n    _id: Types.ObjectId;\r\n\r\n    @Prop()\r\n    name: string; \r\n}\r\n\r\nexport const ThemeSchema = SchemaFactory.createForClass(Theme);","import { Body, Controller, Delete, Get, Param, Patch, Post } from '@nestjs/common';\r\nimport { Public } from '../app.module';\r\nimport { Roles } from '../auth/roles.decorator';\r\nimport { ObjectIdPipe } from '../shared/pipes/object.id.pipe';\r\nimport { Role } from '../users/role.enum';\r\nimport { CreateThemeDto } from './create-theme.dto';\r\nimport { Theme } from './theme.schema';\r\nimport { ThemesService } from './themes.service';\r\n\r\n@Controller('theme')\r\nexport class ThemesController {\r\n  constructor(private readonly themeService: ThemesService) {}\r\n\r\n  @Public()\r\n  @Get()\r\n  async getThemes(): Promise<Theme[]> {\r\n    return await this.themeService.getThemes();\r\n  }\r\n\r\n  @Public()\r\n  @Get(':id')\r\n  async getThemeById(@Param('id', ObjectIdPipe) id: string): Promise<Theme> {\r\n    return await this.themeService.getThemeById(id);\r\n  }\r\n\r\n  @Roles(Role.Admin)\r\n  @Post()\r\n  async createTheme(@Body() createThemeDto: CreateThemeDto): Promise<Theme> {\r\n    return await this.themeService.createTheme(createThemeDto.name);\r\n  }\r\n\r\n  @Roles(Role.Admin)\r\n  @Delete(':id')\r\n  async deleteTheme(@Param('id', ObjectIdPipe) id: string): Promise<Theme> {\r\n    return await this.themeService.deleteTheme(id);\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { Theme, ThemeSchema } from './theme.schema';\r\nimport { ThemesController } from './themes.controller';\r\nimport { ThemesService } from './themes.service';\r\n\r\n@Module({\r\n    imports: [MongooseModule.forFeature([{ name: Theme.name, schema: ThemeSchema }])],\r\n    controllers: [ThemesController],\r\n    providers: [ThemesService],\r\n    exports: [ThemesService]\r\n})\r\n\r\nexport class ThemesModule {}\r\n","import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\r\nimport { Model, Types } from \"mongoose\";\r\nimport { Theme, ThemeDocument } from \"./theme.schema\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\n\r\n@Injectable()\r\nexport class ThemesService {\r\n    constructor(@InjectModel(Theme.name) private themeModel: Model<ThemeDocument>) {}\r\n\r\n    async getThemeById(id: string): Promise<Theme> {\r\n        await this.existing(id);\r\n        return this.themeModel.findOne({ _id: new Types.ObjectId(id) });\r\n    }\r\n\r\n    async getThemes(): Promise<Theme[]> {\r\n        return this.themeModel.find({});\r\n    }\r\n\r\n    async createTheme(name: string): Promise<Theme> {\r\n        if ((await this.getThemes()).filter(p => p.name === name).length > 0) {\r\n            throw new HttpException('A Theme with this name already exists!', HttpStatus.BAD_REQUEST)\r\n        }\r\n\r\n        const newTheme = new this.themeModel({\r\n            _id: new Types.ObjectId(),\r\n            name\r\n        })\r\n\r\n        return newTheme.save();\r\n    }\r\n\r\n    async deleteTheme(id: string): Promise<Theme> {\r\n        await this.existing(id);\r\n        return this.themeModel.findOneAndDelete({ _id: new Types.ObjectId(id) });\r\n    }\r\n\r\n    async existing(themeId: string): Promise<void> {\r\n        const theme = await this.themeModel.findOne({ _id: new Types.ObjectId(themeId) });\r\n\r\n        if (!theme) {\r\n            throw new HttpException(`Theme with id ${themeId} does not exist!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n    }\r\n}","import {\r\n    IsString\r\n} from 'class-validator';\r\n\r\nexport class CreateThreadDto {\r\n    @IsString()\r\n    title: string;\r\n\r\n    @IsString()\r\n    content: string;\r\n\r\n    @IsString()\r\n    image: string;\r\n}","import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\r\nimport { Document, Types } from \"mongoose\";\r\nimport { Message } from \"../messages/message.schema\";\r\n\r\nexport type ThreadDocument = Thread & Document;\r\n\r\n@Schema()\r\nexport class Thread {\r\n    @Prop()\r\n    _id: Types.ObjectId;\r\n\r\n    @Prop()\r\n    title: string;\r\n\r\n    @Prop()\r\n    content: string;\r\n\r\n    @Prop()\r\n    views: number;\r\n\r\n    @Prop({\r\n        ref: 'User'\r\n    })\r\n    likes: [Types.ObjectId];\r\n\r\n    @Prop()\r\n    creationDate: Date;\r\n\r\n    @Prop()\r\n    image: string;\r\n\r\n    @Prop({\r\n        default: []\r\n    })\r\n    messages: [Message]\r\n\r\n    @Prop({\r\n        ref: 'User'\r\n    })\r\n    creator: Types.ObjectId;\r\n}\r\n\r\nexport const ThreadSchema = SchemaFactory.createForClass(Thread);","import { Body, Controller, Delete, Get, Param, Patch, Post, Req } from '@nestjs/common';\r\nimport { ThreadsService } from './threads.service';\r\nimport { Thread } from './thread.schema';\r\nimport { UpdateThreadDto } from './update-thread.dto';\r\nimport { CreateThreadDto } from './create-thread.dto';\r\nimport { Public } from '../app.module';\r\nimport { ObjectIdPipe } from '../shared/pipes/object.id.pipe';\r\n\r\n@Controller('community')\r\nexport class ThreadsController {\r\n  constructor(private readonly threadService: ThreadsService) {}\r\n\r\n  @Public()\r\n  @Get(':communityId/thread')\r\n  async getThreads(@Param('communityId', ObjectIdPipe) communityId: string): Promise<Thread[]> {\r\n    return await this.threadService.getThreads(communityId);\r\n  }\r\n\r\n  @Public()\r\n  @Get(':communityId/thread/:threadId')\r\n  async getThreadById(@Param('communityId', ObjectIdPipe) communityId: string, @Param('threadId', ObjectIdPipe) threadId: string): Promise<Thread> {\r\n    return await this.threadService.getThreadById(communityId, threadId);\r\n  }\r\n\r\n  @Post(':communityId/thread')\r\n  async createThread(@Req() req, @Body() createThreadDto: CreateThreadDto, @Param('communityId', ObjectIdPipe) communityId: string): Promise<Thread> {\r\n    return await this.threadService.createThread(req, communityId, createThreadDto);\r\n  }\r\n\r\n  @Post(':communityId/thread/:threadId/like')\r\n  async likeThread(@Req() req, @Param('communityId', ObjectIdPipe) communityId: string, @Param('threadId', ObjectIdPipe) threadId: string) {\r\n    return await this.threadService.likeThread(req, communityId, threadId);\r\n  }\r\n\r\n  @Public()\r\n  @Post(':communityId/thread/:threadId/view')\r\n  async viewThread(@Param('communityId', ObjectIdPipe) communityId: string, @Param('threadId', ObjectIdPipe) threadId: string) {\r\n    return await this.threadService.viewThread(communityId, threadId);\r\n  }\r\n\r\n  @Patch(':communityId/thread/:threadId')\r\n  async updateThread(@Req() req, @Param('communityId', ObjectIdPipe) communityId: string, @Param('threadId', ObjectIdPipe) threadId: string, @Body() updateThreadDto: UpdateThreadDto): Promise<Thread> {\r\n    return await this.threadService.updateThread(communityId, threadId, req, updateThreadDto);\r\n  }\r\n\r\n  @Delete(':communityId/thread/:threadId')\r\n  async deleteThread(@Req() req, @Param('communityId', ObjectIdPipe) communityId: string, @Param('threadId', ObjectIdPipe) threadId: string): Promise<Thread> {\r\n    return await this.threadService.deleteThread(communityId, threadId, req);\r\n  }\r\n}\r\n","import { MongooseModule } from \"@nestjs/mongoose\";\r\nimport { Module } from \"@nestjs/common\";\r\nimport { Thread, ThreadSchema } from \"./thread.schema\";\r\nimport { ThreadsController } from \"./threads.controller\";\r\nimport { ThreadsService } from \"./threads.service\";\r\nimport { UsersModule } from \"../users/users.module\";\r\nimport { CommunitiesModule } from \"../communities/communities.module\";\r\n\r\n@Module({\r\n    imports: [MongooseModule.forFeature([{ name: Thread.name, schema: ThreadSchema }]), UsersModule, CommunitiesModule],\r\n    controllers: [ThreadsController],\r\n    providers: [ThreadsService]\r\n})\r\n\r\nexport class ThreadsModule {}","import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\r\nimport { Model, Types } from \"mongoose\";\r\nimport { Thread, ThreadDocument } from \"./thread.schema\";\r\nimport { UsersService } from \"../users/users.service\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { Community, CommunityDocument } from \"../communities/community.schema\";\r\nimport { CommunitiesService } from \"../communities/communities.service\";\r\nimport { CreateThreadDto } from \"./create-thread.dto\";\r\nimport { Role } from \"../users/role.enum\";\r\nimport { UpdateThreadDto } from \"./update-thread.dto\";\r\n\r\n@Injectable()\r\nexport class ThreadsService {\r\n    constructor(@InjectModel(Community.name) private communityModel: Model<CommunityDocument>, @InjectModel(Thread.name) private threadModel: Model<ThreadDocument>, private readonly usersService: UsersService, private readonly communitiesService: CommunitiesService) {}\r\n\r\n    async getThreadById(communityId: string, threadId: string): Promise<Thread> {\r\n        await this.existing(communityId, threadId);\r\n\r\n        return (await this.communityModel.aggregate([\r\n            { $match : { _id : new Types.ObjectId(communityId)}},\r\n            { $match : { \"threads._id\" : new Types.ObjectId(threadId)}},\r\n            { $unwind : { path: \"$members\", preserveNullAndEmptyArrays: true }},\r\n            { $project : {\r\n                _id : 0,\r\n                \"threads\" : {\r\n                    $filter : {\r\n                        input : \"$threads\",\r\n                        as : \"thread\",\r\n                        cond : { $eq : [\"$$thread._id\", new Types.ObjectId(threadId)]}\r\n                    }\r\n                }}\r\n            },\r\n            { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: true }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.creator\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.creator\"\r\n            }},\r\n            { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.messages.creator\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.messages.creator\"\r\n            }},\r\n            { $set: {\r\n                \"threads.messages.creator\": \"$threads.messages.creator\" \r\n            }},\r\n            { $group: {\r\n                _id: \"$threads._id\",\r\n                title: {\r\n                  $first: \"$threads.title\"\r\n                },\r\n                content: {\r\n                  $first: \"$threads.content\"\r\n                },\r\n                views: {\r\n                  $first: \"$threads.views\"\r\n                },\r\n                likes: {\r\n                  $first: \"$threads.likes\"\r\n                },\r\n                creationDate: {\r\n                  $first: \"$threads.creationDate\"\r\n                },\r\n                image: {\r\n                  $first: \"$threads.image\"\r\n                },\r\n                messages: {\r\n                  $push: \"$threads.messages\"   \r\n                },\r\n                creator: {\r\n                  $first: \"$threads.creator\"\r\n                }\r\n            }},\r\n            { $unset: [\"creator.password\", \"creator.__v\", \"messages.creator.password\", \"messages.creator.__v\"]}\r\n        ]))[0];\r\n    }\r\n\r\n    async getThreads(communityId: string): Promise<Thread[]> {\r\n        await this.existing(communityId);\r\n\r\n        return (await this.communityModel.aggregate([\r\n            { $match : { _id : new Types.ObjectId(communityId)}},\r\n            { $unwind : { path: \"$members\", preserveNullAndEmptyArrays: true }},\r\n            { $project : {\r\n                _id : 0,\r\n                \"threads\" : {\r\n                    $filter : {\r\n                        input : \"$threads\",\r\n                        as : \"thread\",\r\n                        cond : true\r\n                    }\r\n                }}\r\n            },\r\n            { $unwind : { path: \"$threads\", preserveNullAndEmptyArrays: false }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.creator\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.creator\"\r\n            }},\r\n            { $unwind : { path: \"$threads.messages\", preserveNullAndEmptyArrays: true }},\r\n            { $lookup : { \r\n                from : \"users\",\r\n                localField : \"threads.messages.creator\",\r\n                foreignField : \"_id\",\r\n                as : \"threads.messages.creator\"\r\n            }},\r\n            { $set: {\r\n                \"threads.messages.creator\": \"$threads.messages.creator\" \r\n            }},\r\n            { $group: {\r\n                _id: \"$threads._id\",\r\n                title: {\r\n                  $first: \"$threads.title\"\r\n                },\r\n                content: {\r\n                  $first: \"$threads.content\"\r\n                },\r\n                views: {\r\n                  $first: \"$threads.views\"\r\n                },\r\n                likes: {\r\n                  $first: \"$threads.likes\"\r\n                },\r\n                creationDate: {\r\n                  $first: \"$threads.creationDate\"\r\n                },\r\n                image: {\r\n                  $first: \"$threads.image\"\r\n                },\r\n                messages: {\r\n                  $push: \"$threads.messages\"   \r\n                },\r\n                creator: {\r\n                  $first: \"$threads.creator\"\r\n                }\r\n            }},\r\n            { $unset: [\"creator.password\", \"creator.__v\", \"messages.creator.password\", \"messages.creator.__v\"]}\r\n        ]));\r\n    }\r\n\r\n    async createThread(req, communityId: string, createThreadDto: CreateThreadDto): Promise<Thread> {\r\n        await this.existing(communityId);\r\n\r\n        if ((await this.communitiesService.getCommunityById(communityId)).members.filter(p => p._id.equals(req.user.id)).length === 0) {\r\n            if ((await this.communitiesService.getCommunityById(communityId)).owner._id.equals(req.user.id) || req.user.roles.includes(Role.Admin)) {\r\n                const newThread = new this.threadModel({\r\n                    ...createThreadDto,\r\n                    _id: new Types.ObjectId(),\r\n                    views: 0,\r\n                    creationDate: new Date(),\r\n                    creator: req.user.id\r\n                });\r\n        \r\n                return await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId)}, {$push: {threads: newThread}});\r\n            } else {\r\n                throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\r\n            }\r\n        } else {\r\n            const newThread = new this.threadModel({\r\n                ...createThreadDto,\r\n                _id: new Types.ObjectId(),\r\n                views: 0,\r\n                creationDate: new Date(),\r\n                creator: req.user.id\r\n            });\r\n    \r\n            return await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId)}, {$push: {threads: newThread}});\r\n        }\r\n    }\r\n\r\n    async likeThread(req, communityId: string, threadId: string): Promise<Thread> {\r\n        await this.existing(communityId, threadId);\r\n\r\n        let community;\r\n\r\n        if ((await this.communityModel.find({ $and: [{_id: new Types.ObjectId(communityId)}, {threads: {$elemMatch: {_id: new Types.ObjectId(threadId), likes: {$in: [req.user.id]}}}}]})).length === 0) {\r\n            community = await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$push: {\"threads.$.likes\": req.user.id}}, {new: true});\r\n        } else {\r\n            community = await this.communityModel.findOneAndUpdate({_id: new Types.ObjectId(communityId), \"threads._id\": new Types.ObjectId(threadId)}, {$pull: {\"threads.$.likes\": req.user.id}}, {new: true});\r\n        }\r\n        \r\n        return community.threads.filter(p => p._id.equals(new Types.ObjectId(threadId)))[0];\r\n    }\r\n\r\n    async viewThread(communityId: string, threadId: string): Promise<Thread> {\r\n        await this.existing(communityId, threadId);\r\n\r\n        let community = await this.communityModel.findOneAndUpdate({_id : new Types.ObjectId(communityId), \"threads._id\" : new Types.ObjectId(threadId)}, {$inc: {\"threads.$.views\" : 1}});\r\n        return community.threads.filter(p => p._id.equals(new Types.ObjectId(threadId)))[0];\r\n    }\r\n\r\n    async updateThread(communityId: string, threadId : string, req, updateThreadDto: UpdateThreadDto): Promise<Thread> {\r\n        await this.existing(communityId, threadId);\r\n\r\n        const thread = (await this.communityModel.findOne(\r\n            {_id: new Types.ObjectId(communityId)}, \r\n            {threads:{$elemMatch:{_id: new Types.ObjectId(threadId)}}}))\r\n            .threads.filter(async thread => thread._id.equals(new Types.ObjectId(threadId)))[0];\r\n\r\n        if(!(await req.user.id.equals(thread.creator)) && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`Unauthorized`, HttpStatus.UNAUTHORIZED);\r\n        }\r\n\r\n        return await this.communityModel.findOneAndUpdate(\r\n            {_id : new Types.ObjectId(communityId), \"threads._id\" : new Types.ObjectId(threadId)}, \r\n            {$set: {\"threads.$\" : {...thread, ...updateThreadDto}}}, \r\n            {new: true});\r\n    }\r\n\r\n    async deleteThread(communityId : string, threadId : string, req): Promise<Thread> {\r\n        await this.existing(communityId, threadId);\r\n\r\n        const thread = (await this.communityModel.findOne(\r\n            {_id: new Types.ObjectId(communityId)}, \r\n            {threads:{$elemMatch:{_id: new Types.ObjectId(threadId)}}}))\r\n            .threads.filter(async thread => thread._id.equals(new Types.ObjectId(threadId)))[0];\r\n\r\n        if(!(await req.user.id.equals(thread.creator)) && !(req.user.roles.includes(Role.Admin))) {\r\n            throw new HttpException(`Unauthorized`, HttpStatus.UNAUTHORIZED);\r\n        }\r\n\r\n        return (await this.communityModel.findOneAndUpdate(\r\n            { _id: new Types.ObjectId(communityId) }, \r\n            {$pull: { threads : {_id: new Types.ObjectId(threadId)}}}, \r\n            { new: true }))\r\n    }\r\n\r\n    async existing(communityId : string, threadId? : string) : Promise<void> {\r\n        const community = await this.communityModel.findOne({ _id : new Types.ObjectId(communityId) });\r\n\r\n        if(!community) {\r\n            throw new HttpException(`Community with id ${communityId} does not exist!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n\r\n        if(threadId) {\r\n            if(!(community.threads.filter(thread => thread._id.equals(new Types.ObjectId(threadId))).length > 0)) {\r\n                throw new HttpException(`Thread with id ${threadId} doesn't exist in the community with id ${communityId}!`, HttpStatus.BAD_REQUEST);\r\n            }\r\n        }\r\n    }\r\n}","import {\r\n    IsString,\r\n    IsOptional\r\n} from 'class-validator';\r\n\r\nexport class UpdateThreadDto {\r\n    @IsString()\r\n    @IsOptional()\r\n    title: string;\r\n\r\n    @IsString()\r\n    @IsOptional()\r\n    content: string;\r\n\r\n    @IsString()\r\n    @IsOptional()\r\n    image: string;\r\n}","import {\r\n    IsDefined,\r\n    IsNotEmpty,\r\n    IsString,\r\n    Matches\r\n} from 'class-validator';\r\n\r\nexport class CreateUserDto {\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    username: string;\r\n\r\n    @Matches(/^\\d{4}[./-]\\d{2}[./-]\\d{2}$/)\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    birthDate: Date;\r\n\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    emailAddress: string;\r\n\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    phoneNumber: string;\r\n\r\n    @IsString()\r\n    @IsNotEmpty()\r\n    @IsDefined()\r\n    password: string;\r\n\r\n    @IsString()\r\n    image: string;\r\n}","export enum Role {\r\n    User = 'user',\r\n    Admin = 'admin',\r\n}","import {\r\n    IsOptional,\r\n    IsString,\r\n    Matches\r\n} from 'class-validator';\r\n\r\nexport class UpdateUserDto {\r\n    @IsString()\r\n    @IsOptional()\r\n    username: string;\r\n\r\n    @Matches(/^\\d{4}[./-]\\d{2}[./-]\\d{2}$/)\r\n    @IsOptional()\r\n    birthDate: Date;\r\n\r\n    @IsString()\r\n    @IsOptional()\r\n    emailAddress: string;\r\n\r\n    @IsString()\r\n    @IsOptional()\r\n    phoneNumber: string;\r\n\r\n    @IsString()\r\n    @IsOptional()\r\n    password: string;\r\n\r\n    @IsString()\r\n    @IsOptional()\r\n    image: string;\r\n}","import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\r\nimport { Document, Types, Schema as MongooseSchema } from \"mongoose\";\r\nimport { Role } from \"./role.enum\";\r\n\r\nexport type UserDocument = User & Document;\r\n\r\n@Schema()\r\nexport class User {\r\n    @Prop()\r\n    _id: Types.ObjectId;\r\n\r\n    @Prop({\r\n        unique: true\r\n    })\r\n    username: string;\r\n\r\n    @Prop()\r\n    birthDate: Date;\r\n\r\n    @Prop()\r\n    emailAddress: string;\r\n\r\n    @Prop()\r\n    phoneNumber: string;\r\n\r\n    @Prop()\r\n    password: string;\r\n\r\n    @Prop()\r\n    registerDate: Date;\r\n\r\n    @Prop()\r\n    image: string;\r\n\r\n    @Prop()\r\n    isActive: boolean;\r\n\r\n    @Prop()\r\n    roles: Role[];\r\n\r\n    @Prop({\r\n        ref: 'User'\r\n    })\r\n    following: [Types.ObjectId];\r\n\r\n    @Prop({\r\n        ref: 'User'\r\n    })\r\n    followers: [Types.ObjectId];\r\n\r\n    @Prop({\r\n        ref: 'Community',\r\n        default: []\r\n    })\r\n    createdCommunities: [Types.ObjectId];\r\n\r\n    @Prop({\r\n        ref: 'Community',\r\n        default: []\r\n    })\r\n    joinedCommunities: [Types.ObjectId];\r\n}\r\n\r\nexport const UserSchema = SchemaFactory.createForClass(User);","import { Body, Controller, Get, Param, Patch, Post, Req } from \"@nestjs/common\";\r\nimport { Roles } from \"../auth/roles.decorator\";\r\nimport { ObjectIdPipe } from \"../shared/pipes/object.id.pipe\";\r\nimport { CreateUserDto } from \"./create-user.dto\";\r\nimport { Role } from \"./role.enum\";\r\nimport { UpdateUserDto } from \"./update-user.dto\";\r\nimport { User } from \"./user.schema\";\r\nimport { UsersService } from \"./users.service\";\r\n\r\n@Controller('user')\r\nexport class UsersController {\r\n    constructor(private readonly userService: UsersService) {}\r\n\r\n    @Get()\r\n    async getUsers(): Promise<User[]> {\r\n        return await this.userService.getUsers();\r\n    }\r\n\r\n    @Get(':id')\r\n    async getUserById(@Param('id', ObjectIdPipe) id: string): Promise<User> {\r\n        return await this.userService.getUserById(id);\r\n    }\r\n\r\n    @Get(':username')\r\n    async getUserByUsername(@Param('username') username: string): Promise<User> {\r\n        return await this.userService.getUserByUsername(username);\r\n    }\r\n\r\n    @Post(':id/follow')\r\n    async followUser(@Req() req, @Param('id', ObjectIdPipe) id: string): Promise<User[]> {\r\n        return await this.userService.followUser(req, id);\r\n    }\r\n\r\n    @Post(':id/unfollow')\r\n    async unfollowUser(@Req() req, @Param('id', ObjectIdPipe) id: string): Promise<User[]> {\r\n        return await this.userService.unfollowUser(req, id);\r\n    }\r\n\r\n    @Post()\r\n    @Roles(Role.Admin)\r\n    async createUser(@Body() createUserDto: CreateUserDto): Promise<User> {\r\n        return await this.userService.createUser(createUserDto.username, createUserDto.birthDate, createUserDto.emailAddress, createUserDto.phoneNumber, createUserDto.password, createUserDto.image);\r\n    }\r\n\r\n    @Patch(':id')\r\n    async updateUser(@Req() req, @Param('id', ObjectIdPipe) id: string, @Body() updateUserDto: UpdateUserDto): Promise<User> {\r\n        return await this.userService.updateUser(req, id, updateUserDto);\r\n    }\r\n}","import { forwardRef, Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { environment } from '../../environments/environment';\r\nimport { CommunitiesModule } from '../communities/communities.module';\r\nimport { Neo4jModule } from '../neo4j/neo4j.module';\r\nimport { User, UserSchema } from './user.schema';\r\nimport { UsersController } from './users.controller';\r\nimport { UsersService } from './users.service';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]), forwardRef(() => CommunitiesModule), Neo4jModule.forRoot({\r\n    scheme: 'bolt',\r\n    host: environment.BASE_NEO_HOST,\r\n    port: 7687,\r\n    username: 'neo4j',\r\n    password: 'neo',\r\n  })],\r\n  controllers: [UsersController],\r\n  providers: [UsersService],\r\n  exports: [UsersService]\r\n})\r\nexport class UsersModule {}","import { forwardRef, HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\r\nimport { Model, Types } from 'mongoose';\r\nimport { Role } from './role.enum';\r\nimport * as bcrypt from 'bcrypt';\r\nimport { User, UserDocument } from './user.schema';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { CommunitiesService } from '../communities/communities.service';\r\nimport { Community, CommunityDocument } from '../communities/community.schema';\r\nimport { Neo4jService } from '../neo4j/neo4j.service';\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n  constructor(@InjectModel(User.name) private userModel: Model<UserDocument>, @InjectModel(Community.name) private communityModel: Model<CommunityDocument>, @Inject(forwardRef(() => CommunitiesService)) private readonly communitiesService: CommunitiesService, private readonly neo4jService: Neo4jService) {}\r\n\r\n  async getUserByUsername(username: string): Promise<User | undefined> {\r\n    return this.userModel.findOne({ username: username });\r\n  }\r\n\r\n  async getUsers(): Promise<User[]> {\r\n    return await this.userModel.aggregate([\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"following\",\r\n        foreignField: \"_id\",\r\n        as: \"following\"\r\n      }},\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"followers\",\r\n        foreignField: \"_id\",\r\n        as: \"followers\"\r\n      }},\r\n      {$unset: [\"password\", \"__v\"]}\r\n    ])\r\n  }\r\n\r\n  async getUserById(id: string): Promise<User> {\r\n    await this.existing(id);\r\n\r\n    return (await this.userModel.aggregate([\r\n      {$match: { \"_id\": new Types.ObjectId(id) }},\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"following\",\r\n        foreignField: \"_id\",\r\n        as: \"following\"\r\n      }},\r\n      {$lookup: {\r\n        from: \"users\",\r\n        localField: \"followers\",\r\n        foreignField: \"_id\",\r\n        as: \"followers\"\r\n      }},\r\n      {$unset: [\"password\", \"__v\"]}\r\n    ]))[0];\r\n  }\r\n\r\n  async addJoinedCommunity(communityId: Types.ObjectId, userId: Types.ObjectId): Promise<User> {\r\n    await this.existing(userId.toString());\r\n\r\n    return await this.userModel.findOneAndUpdate({ _id: userId }, { $push: { joinedCommunities: communityId } }, {new: true});\r\n  }\r\n\r\n  async addCreatedCommunity(communityId: Types.ObjectId, userId: Types.ObjectId): Promise<User> {\r\n    await this.existing(userId.toString());\r\n    const user = await this.userModel.findOne({ _id: userId });\r\n\r\n    for await (const createdCommunityId of user.createdCommunities) {\r\n      await this.communityModel.updateMany({ _id: new Types.ObjectId(createdCommunityId), \"owner._id\": new Types.ObjectId(userId) }, { $push:  {\"owner.$[_id]createdCommunities\": communityId } } );\r\n    }\r\n\r\n    return await this.userModel.findOneAndUpdate({ _id: userId }, { $push: { createdCommunities: communityId } }, {new: true});\r\n  }\r\n\r\n  async removeJoinedCommunity(communityId: Types.ObjectId, userId: Types.ObjectId): Promise<User> {\r\n    await this.existing(userId.toString());\r\n\r\n    const community = await this.communityModel.findOne({ _id: communityId });\r\n\r\n    if(community.owner._id.equals(userId)) {\r\n      await this.communityModel.updateMany({ _id: communityId, \"owner._id\": userId }, { $pull:  {\"owner.$.joinedCommunities\": communityId } } );\r\n    }\r\n\r\n    return await this.userModel.findOneAndUpdate({ _id: userId }, { $pull: { joinedCommunities: communityId } }, {new: true});\r\n  }\r\n\r\n  async removeCreatedCommunity(communityId: Types.ObjectId, userId: Types.ObjectId): Promise<User> {\r\n    await this.existing(userId.toString());\r\n  \r\n    return await this.userModel.findOneAndUpdate({ _id: userId }, { $pull: { createdCommunities: communityId } }, {new: true});\r\n  }\r\n\r\n  async followUser(req, id: string): Promise<User[]> {\r\n    await this.existing(id);\r\n\r\n    const user = await this.getUserById(id);\r\n    const loggedInUser = await this.getUserById(req.user.id);\r\n\r\n    if (!(loggedInUser._id.equals(user._id))) {\r\n      if (!((await this.userModel.find({ $and: [ {_id: req.user.id}, {following: { $in : new Types.ObjectId(id)}} ] })).length > 0)) {\r\n        const resultUser = await this.userModel.findOneAndUpdate({_id: new Types.ObjectId(id)}, {$push: {\"followers\": new Types.ObjectId(req.user.id)}}, {new: true});\r\n        const resultLoggedIn = await this.userModel.findOneAndUpdate({_id: new Types.ObjectId(req.user.id)}, {$push: {\"following\": new Types.ObjectId(id)}}, {new: true});\r\n    \r\n        return [resultLoggedIn, resultUser];\r\n      } else {\r\n        throw new HttpException('Already following this user!', HttpStatus.BAD_REQUEST);\r\n      }\r\n    } else {\r\n      throw new HttpException('Can not follow yourself!', HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  async unfollowUser(req, id: string): Promise<User[]> {\r\n    await this.existing(id);\r\n\r\n    const user = await this.getUserById(id);\r\n    const loggedInUser = await this.getUserById(req.user.id);\r\n\r\n    if (!(loggedInUser._id.equals(user._id))) {\r\n      if (!((await this.userModel.find({ $and: [ {_id: req.user.id}, {following: { $in : new Types.ObjectId(id)}} ] })).length === 0)) {\r\n        const resultUser = await this.userModel.findOneAndUpdate({_id: new Types.ObjectId(id)}, {$pull: {\"followers\": new Types.ObjectId(req.user.id)}}, {new: true});\r\n        const resultLoggedIn = await this.userModel.findOneAndUpdate({_id: new Types.ObjectId(req.user.id)}, {$pull: {\"following\": new Types.ObjectId(id)}}, {new: true});\r\n\r\n        return [resultLoggedIn, resultUser];\r\n      } else {\r\n        throw new HttpException('You do not follow this user!', HttpStatus.BAD_REQUEST);\r\n      }\r\n    } else {\r\n      throw new HttpException('Can not unfollow yourself!', HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n\r\n  async createUser(username: string, birthDate: Date, emailAddress: string, phoneNumber: string, password: string, image: string): Promise<User> {\r\n    password = await bcrypt.hashSync(password, 10);\r\n\r\n    birthDate = new Date(birthDate);\r\n    birthDate.setHours(birthDate.getHours() + 1);\r\n\r\n    if (birthDate > new Date()) {\r\n      throw new HttpException(`Birthdate ${birthDate} lies in the future!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    if ((await this.getUsers()).filter(p => p.username === username).length > 0) {\r\n      throw new HttpException(`Username ${username} already in use!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    const newUser = new this.userModel({\r\n      _id: new Types.ObjectId(),\r\n      username,\r\n      birthDate,\r\n      emailAddress,\r\n      phoneNumber,\r\n      password,\r\n      registerDate: new Date(),\r\n      image,\r\n      roles: [Role.User],\r\n      isActive: true\r\n    });\r\n\r\n    const result = await this.userModel.create(newUser);\r\n\r\n    await this.neo4jService.write(`\r\n      CREATE\r\n      (n:User {\r\n      id: '${result._id.toString()}',\r\n      username: '${newUser.username}', \r\n      birthDate: '${newUser.birthDate.toISOString()}'\r\n     })`,\r\n    {});\r\n\r\n    return result;\r\n  }\r\n\r\n  async updateUser(req, id: string, user: Partial<User>): Promise<User> {\r\n    await this.existing(id);\r\n\r\n    if (req.user.id.equals(new Types.ObjectId(id)) || req.user.roles.includes(Role.Admin)) {\r\n      if (user.username) {\r\n        if ((await this.getUsers()).filter(p => p.username === user.username && !(p._id.equals(new Types.ObjectId(id)))).length > 0) {\r\n          throw new HttpException(`Username ${user.username} already in use!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n      }\r\n\r\n      if (user.birthDate) {\r\n        user.birthDate = new Date(user.birthDate);\r\n        user.birthDate.setHours(user.birthDate.getHours() + 1);\r\n\r\n        if (user.birthDate > new Date()) {\r\n          throw new HttpException(`Birthdate ${user.birthDate} lies in the future!`, HttpStatus.BAD_REQUEST);\r\n        }\r\n      }\r\n      \r\n      if (user.password) {\r\n        user.password = await bcrypt.hashSync(user.password, 10);\r\n      }\r\n\r\n      user._id = new Types.ObjectId(id);\r\n\r\n      const ownedCommunities = (await this.communitiesService.getCommunities()).filter(p => p.owner._id.equals(user._id));\r\n\r\n      ownedCommunities.forEach(async comm => {\r\n        await this.communityModel.updateOne({ _id: new Types.ObjectId(comm._id)}, { $set: { owner: {...(await this.getUserById(id)), ...user} }});\r\n      });\r\n\r\n      return this.userModel.findOneAndUpdate({ _id: new Types.ObjectId(id) }, user);\r\n    } else {\r\n      throw new HttpException('Unauthorized', HttpStatus.UNAUTHORIZED);\r\n    }\r\n  }\r\n\r\n  async existing(userId: string): Promise<void> {\r\n    const user = await this.userModel.findOne({ _id: new Types.ObjectId(userId) });\r\n\r\n    if (!user) {\r\n      throw new HttpException(`User with id ${userId} does not exist!`, HttpStatus.BAD_REQUEST);\r\n    }\r\n  }\r\n}","const password = process.env.PASSWORD_MONGO_URL;\r\nconst usernameNeo = process.env.USERNAME_NEO;\r\nconst passwordNeo = process.env.PASSWORD_NEO;\r\n\r\nexport const environment = {\r\n  production: true,\r\n  BASE_MONGO_URL: `mongodb://Gustave:${password}@ac-ldb5hca-shard-00-00.m6gvewv.mongodb.net:27017,ac-ldb5hca-shard-00-01.m6gvewv.mongodb.net:27017,ac-ldb5hca-shard-00-02.m6gvewv.mongodb.net:27017/?ssl=true&replicaSet=atlas-jaynf6-shard-0&authSource=admin&retryWrites=true&w=majority`,\r\n  BASE_NEO_HOST: '44.199.235.138',\r\n  USERNAME_NEO: usernameNeo,\r\n  PASSWORD_NEO: passwordNeo\r\n};\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"bcrypt\");","module.exports = require(\"class-validator\");","module.exports = require(\"mongoose\");","module.exports = require(\"neo4j-driver\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"passport-local\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport { Logger, ValidationError, ValidationPipe } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { ValidationFilter } from './app/shared/filters/validation.filter';\r\nimport { ValidationException } from './app/shared/filters/validation.exception';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  const globalPrefix = 'api';\r\n  app.enableCors();\r\n  app.useGlobalFilters(new ValidationFilter);\r\n  app.setGlobalPrefix(globalPrefix);\r\n  app.useGlobalPipes(new ValidationPipe({\r\n    exceptionFactory: (errors: ValidationError[]) => {\r\n      const messages = errors.map(\r\n        error => `${error.property} has wrong value ${error.value}, ${Object.values(error.constraints).join(', ')}`\r\n      )\r\n\r\n      return new ValidationException(messages);\r\n    }\r\n  }));\r\n  const port = process.env.PORT || 3333;\r\n  await app.listen(port);\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\r\n  );\r\n}\r\n\r\nbootstrap();\r\n"],"names":["AppController","Controller","IS_PUBLIC_KEY","Public","SetMetadata","AppModule","Module","imports","MongooseModule","forRoot","environment","BASE_MONGO_URL","CommunitiesModule","ThreadsModule","AuthModule","UsersModule","ThemesModule","MessagesModule","Neo4jModule","scheme","host","BASE_NEO_HOST","port","username","USERNAME_NEO","password","PASSWORD_NEO","controllers","providers","provide","APP_GUARD","useClass","JwtAuthGuard","RolesGuard","AppService","getData","message","Injectable","AuthController","constructor","authService","login","req","this","body","register","user","getProfile","UseGuards","LocalAuthGuard","Post","Request","Body","CreateUserDto","Get","AuthService","PassportModule","JwtModule","secret","jwtConstants","signOptions","expiresIn","LocalStrategy","JwtStrategy","exports","usersService","jwtService","validateUser","pass","getUserByUsername","bcrypt","compare","HttpException","HttpStatus","BAD_REQUEST","payload","id","_id","roles","loggedInUser","emailAddress","image","access_token","sign","result","createUser","birthDate","phoneNumber","UsersService","JwtService","AuthGuard","reflector","super","canActivate","context","getAllAndOverride","getHandler","getClass","Reflector","PassportStrategy","Strategy","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","ignoreExpiration","secretOrKey","validate","UNAUTHORIZED","UnauthorizedException","ROLES_KEY","Roles","requiredRoles","switchToHttp","getRequest","some","role","includes","CommunitiesController","communityService","getAllJoinedCommunities","getJoinedCommunities","getAllCreatedCommunities","getCreatedCommunities","getCommunities","getCommunityById","createCommunity","createCommunityDto","joinCommunity","leaveCommunity","updateCommunity","updateCommunityDto","deleteCommunity","Req","Promise","Param","ObjectIdPipe","CreateCommunityDto","Patch","UpdateCommunityDto","Delete","CommunitiesService","forFeature","name","Community","schema","CommunitySchema","forwardRef","communityModel","themesService","existing","findOne","Types","ObjectId","find","joinedCommunities","getUserById","communityId","push","toString","createdCommunities","themes","areValidObjectIds","themesArray","getThemes","filter","p","mergedCommunity","creationDate","Date","ranking","owner","addCreatedCommunity","community","create","updateMany","$push","equals","members","length","addJoinedCommunity","findOneAndUpdate","removeJoinedCommunity","$pull","Role","Admin","updatedObject","theme","getThemeById","creator","memberId","removeCreatedCommunity","findOneAndDelete","value","every","isValidObjectId","InjectModel","Inject","Model","ThemesService","Prop","Number","default","ref","User","Schema","SchemaFactory","createForClass","IsString","IsNotEmpty","IsDefined","IsBoolean","IsOptional","CreateMessageDto","Message","MessageSchema","MessagesController","messagesService","getMessages","threadId","getMessageById","messageId","createMessage","createMessageDto","likeMessage","updateMessage","updateMessageDto","deleteMessage","UpdateMessageDto","MessagesService","messageModel","threads","messages","currentCommunity","newMessage","likes","hasLikes","new","arrayFilters","$set","oldMessage","NEO4J_CONFIG","NEO4J_DRIVER","static","config","module","useValue","inject","useFactory","createDriver","Neo4jService","driver","getDriver","getConfig","getReadSession","database","session","defaultAccessMode","READ","getWriteSession","WRITE","read","cypher","params","run","write","Neo4jConfig","Driver","console","log","auth","basic","verifyConnectivity","ValidationException","BadRequestException","validationErrors","ValidationFilter","catch","exception","getResponse","status","json","statusCode","timeStamp","createdBy","Catch","transform","isValid","createFromHexString","error","CreateThemeDto","Theme","ThemeSchema","ThemesController","themeService","createTheme","createThemeDto","deleteTheme","themeModel","save","themeId","CreateThreadDto","Thread","ThreadSchema","ThreadsController","threadService","getThreads","getThreadById","createThread","createThreadDto","likeThread","viewThread","updateThread","updateThreadDto","deleteThread","UpdateThreadDto","ThreadsService","threadModel","communitiesService","aggregate","$match","$unwind","path","preserveNullAndEmptyArrays","$project","$filter","input","as","cond","$eq","$lookup","from","localField","foreignField","$group","title","$first","content","views","$unset","newThread","$and","$elemMatch","$in","$inc","thread","Matches","UpdateUserDto","unique","UserSchema","UsersController","userService","getUsers","followUser","unfollowUser","createUserDto","updateUser","updateUserDto","userModel","neo4jService","userId","createdCommunityId","following","resultUser","hashSync","setHours","getHours","newUser","registerDate","isActive","toISOString","forEach","comm","updateOne","process","env","PASSWORD_MONGO_URL","usernameNeo","passwordNeo","production","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","enableCors","useGlobalFilters","setGlobalPrefix","useGlobalPipes","ValidationPipe","exceptionFactory","errors","map","property","Object","values","constraints","join","PORT","listen","Logger","bootstrap"],"sourceRoot":""}