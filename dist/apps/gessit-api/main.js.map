{"version":3,"file":"main.js","mappings":"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","sources":["webpack://gessit/./apps/gessit-api/src/app/app.controller.ts","webpack://gessit/./apps/gessit-api/src/app/app.module.ts","webpack://gessit/./apps/gessit-api/src/app/app.service.ts","webpack://gessit/./apps/gessit-api/src/app/communities/communities.module.ts","webpack://gessit/./apps/gessit-api/src/app/communities/controllers/communities.controller.ts","webpack://gessit/./apps/gessit-api/src/app/communities/dto/create-community.dto.ts","webpack://gessit/./apps/gessit-api/src/app/communities/dto/update-community.dto.ts","webpack://gessit/./apps/gessit-api/src/app/communities/repositories/communities.repository.ts","webpack://gessit/./apps/gessit-api/src/app/communities/schemas/community.schema.ts","webpack://gessit/./apps/gessit-api/src/app/communities/services/communities.service.ts","webpack://gessit/external commonjs \"@nestjs/common\"","webpack://gessit/external commonjs \"@nestjs/core\"","webpack://gessit/external commonjs \"@nestjs/mongoose\"","webpack://gessit/external commonjs \"mongoose\"","webpack://gessit/external commonjs \"tslib\"","webpack://gessit/webpack/bootstrap","webpack://gessit/./apps/gessit-api/src/main.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\r\n\r\nimport { AppService } from './app.service';\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  @Get()\r\n  getData() {\r\n    return this.appService.getData();\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\n\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { CommunitiesModule } from './communities/communities.module';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forRoot('mongodb://127.0.0.1:27017/gessit'), CommunitiesModule],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getData(): { message: string } {\r\n    return { message: 'Welcome to gessit-api!' };\r\n  }\r\n}\r\n","import { MongooseModule } from \"@nestjs/mongoose\";\r\nimport { Module } from \"@nestjs/common\";\r\nimport { Community, CommunitySchema } from \"./schemas/community.schema\";\r\nimport { CommunitiesController } from \"./controllers/communities.controller\";\r\nimport { CommunitiesService } from \"./services/communities.service\";\r\nimport { CommunitiesRepository } from \"./repositories/communities.repository\";\r\n\r\n@Module({\r\n    imports: [MongooseModule.forFeature([{ name: Community.name, schema: CommunitySchema }])],\r\n    controllers: [CommunitiesController],\r\n    providers: [CommunitiesService, CommunitiesRepository]\r\n})\r\n\r\nexport class CommunitiesModule {}","import { Body, Controller, Delete, Get, Param, Patch, Post } from '@nestjs/common';\r\nimport { CommunitiesService } from '../services/communities.service';\r\nimport { CreateCommunityDto } from '../dto/create-community.dto';\r\nimport { Community } from '../schemas/community.schema';\r\nimport { UpdateCommunityDto } from '../dto/update-community.dto';\r\n\r\n@Controller('community')\r\nexport class CommunitiesController {\r\n  constructor(private readonly communityService: CommunitiesService) {}\r\n\r\n  @Get()\r\n  async getCommunities(): Promise<Community[]> {\r\n    return await this.communityService.getCommunities();\r\n  }\r\n\r\n  @Get(':id')\r\n  async getCommunityById(@Param('id') id: string): Promise<Community> {\r\n    return await this.communityService.getCommunityById(id);\r\n  }\r\n\r\n  @Post()\r\n  async createCommunity(@Body() createCommunityDto: CreateCommunityDto): Promise<Community> {\r\n    return await this.communityService.createCommunity(createCommunityDto.name, createCommunityDto.description);\r\n  }\r\n\r\n  @Patch(':id')\r\n  async updateCommunity(@Param('id') id: string, @Body() updateCommunityDto: UpdateCommunityDto): Promise<Community> {\r\n    return await this.communityService.updateCommunity(id, updateCommunityDto);\r\n  }\r\n\r\n  @Delete(':id')\r\n  async deleteCommunity(@Param('id') id: string): Promise<Community> {\r\n    return await this.communityService.deleteCommunity(id);\r\n  }\r\n}\r\n","export class CreateCommunityDto {\r\n    name: string;\r\n    description: string;\r\n    image: string;\r\n}","export class UpdateCommunityDto {\r\n    name: string;\r\n    description: string;\r\n    image: string;\r\n}","import { Injectable } from \"@nestjs/common\";\r\nimport { InjectModel } from \"@nestjs/mongoose\";\r\nimport { FilterQuery, Model } from \"mongoose\";\r\nimport { Community, CommunityDocument } from \"../schemas/community.schema\";\r\n\r\n@Injectable()\r\nexport class CommunitiesRepository {\r\n    constructor(@InjectModel(Community.name) private communityModel: Model<CommunityDocument>) {}\r\n\r\n    async findOne(communityFilterQuery: FilterQuery<Community>): Promise<Community> {\r\n        return this.communityModel.findOne(communityFilterQuery);\r\n    }\r\n\r\n    async find(communitiesFilterQuery: FilterQuery<Community>): Promise<Community[]> {\r\n        return this.communityModel.find(communitiesFilterQuery);\r\n    }\r\n\r\n    async create(community: Community): Promise<Community> {\r\n        const newCommunity = new this.communityModel(community);\r\n        return newCommunity.save();\r\n    }\r\n\r\n    async findOneAndUpdate(communityFilterQuery: FilterQuery<Community>, community: Partial<Community>): Promise<Community> {\r\n        return this.communityModel.findOneAndUpdate(communityFilterQuery, community, { new: true });\r\n    }\r\n\r\n    async findOneAndDelete(communityFilterQuery: FilterQuery<Community>): Promise<Community> {\r\n        return this.communityModel.findOneAndDelete(communityFilterQuery);\r\n    }\r\n}","import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\r\nimport { Document } from \"mongoose\";\r\n\r\nexport type CommunityDocument = Community & Document;\r\n\r\n@Schema()\r\nexport class Community {\r\n    @Prop()\r\n    name: string;\r\n\r\n    @Prop()\r\n    description: string;\r\n\r\n    @Prop()\r\n    ranking: Number;\r\n\r\n    @Prop()\r\n    creationDate: Date;\r\n\r\n    @Prop()\r\n    image: string\r\n}\r\n\r\nexport const CommunitySchema = SchemaFactory.createForClass(Community);","import { Injectable } from \"@nestjs/common\";\r\nimport { CommunitiesRepository } from \"../repositories/communities.repository\";\r\nimport { Community } from \"../schemas/community.schema\";\r\n\r\n@Injectable()\r\nexport class CommunitiesService {\r\n    constructor(private readonly communityRepository : CommunitiesRepository) {}\r\n\r\n    async getCommunityById(id: string): Promise<Community> {\r\n        return this.communityRepository.findOne({ _id: id });\r\n    }\r\n\r\n    async getCommunities(): Promise<Community[]> {\r\n        return this.communityRepository.find({});\r\n    }\r\n\r\n    async createCommunity(name: string, description: string): Promise<Community> {\r\n        return this.communityRepository.create({\r\n            name,\r\n            description,\r\n            ranking: 0,\r\n            creationDate: new Date(),\r\n            image: \"url\"\r\n        });\r\n    }\r\n\r\n    async updateCommunity(id: string, community: Partial<Community>): Promise<Community> {\r\n        return this.communityRepository.findOneAndUpdate({ _id: id }, community);\r\n    }\r\n\r\n    async deleteCommunity(id: string): Promise<Community> {\r\n        return this.communityRepository.findOneAndDelete({ _id: id });\r\n    }\r\n}","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"mongoose\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport { Logger } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  const globalPrefix = 'api';\r\n  app.setGlobalPrefix(globalPrefix);\r\n  const port = process.env.PORT || 3333;\r\n  await app.listen(port);\r\n  Logger.log(\r\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\r\n  );\r\n}\r\n\r\nbootstrap();\r\n"],"names":[],"sourceRoot":""}